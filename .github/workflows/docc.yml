# Workflow name and trigger
name: DocC Runner

# Trigger the workflow when changes are pushed to the `main` branch
on:
  push:
    branches: ["main"]  # Trigger only when pushing to the main branch

# Define permissions required for the workflow
permissions:
  contents: read   # Read access to repository contents (source files, docs)
  pages: write     # Write access to GitHub Pages for deployment of generated HTML docs
  id-token: write  # Permission to generate authentication tokens for GitHub Pages

# Concurrency: Ensures that only one workflow runs for GitHub Pages at a time.
concurrency:
  group: "pages"
  cancel-in-progress: true

# Define the jobs in this workflow
jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}  # URL to the deployed site on GitHub Pages

    runs-on: macos-14  # This workflow uses macOS as the runner for Xcode

    steps:
      # Step 1: Checkout the repository code (including docs and source files)
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Setup GitHub Pages for deployment
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Step 3: Get Swift version used in the project (helpful for diagnostics)
      - name: Get Swift Version
        id: get_swift_version
        run: |
          echo "Swift version:"
          swift --version
          echo "swift_version=$(swift --version | head -n 1 | awk '{print $3}')" >> $GITHUB_ENV  # Capture the detected Swift version

      # Step 4: Select the appropriate Xcode version to build the documentation
      - name: Select Xcode and Swift Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.1.0'  # Ensure compatibility with your Swift project

      # Step 5: Ensure the command line tools are available and `docc` can be found
      - name: Ensure Xcode Command Line Tools
        run: |
          echo "Checking for xcode-select"
          xcode-select --install || echo "xcode-select already installed"  # Install command line tools if necessary
          echo "Checking for docc tool"
          which docc || echo "docc tool not found"

      # Step 6: Automatically detect if it's a Swift Package or Xcode project
      - name: Detect Project Type
        id: detect_project
        run: |
          # Check if Package.swift exists (indicating a Swift Package)
          if [ -f "Package.swift" ]; then
            echo "This is a Swift Package."
            echo "is_swift_package=true" >> $GITHUB_ENV
          elif [ -f "*.xcodeproj" ]; then
            # Find the Xcode project file if it's an Xcode project
            PROJECT_FILE=$(find . -name "*.xcodeproj" -print -quit)
            if [ -z "$PROJECT_FILE" ]; then
              echo "Error: No .xcodeproj file found!"
              exit 1
            fi
            echo "Found Xcode project: $PROJECT_FILE"
            echo "is_swift_package=false" >> $GITHUB_ENV
            echo "project_file=$PROJECT_FILE" >> $GITHUB_ENV
          else
            echo "Error: Neither a Swift Package nor an Xcode project found!"
            exit 1
          fi

      # Step 7: Build documentation for Swift Package or Xcode project
      - name: Build DocC Documentation
        run: |
          set -e  # Exit the script if any command fails

          if [ "${{ env.is_swift_package }}" == "true" ]; then
            # For Swift Package, use swift package to resolve and build documentation
            echo "Resolving dependencies for Swift Package..."
            swift package resolve

            echo "Building DocC documentation for Swift Package..."
            swift run docc generate --output-path docs

          elif [ "${{ env.is_swift_package }}" == "false" ]; then
            # For Xcode project, use xcodebuild to build documentation
            echo "Resolving dependencies for Xcode project..."
            swift package resolve  # Resolve dependencies for Xcode project

            # Get available schemes dynamically
            SCHEMES=$(xcodebuild -list -project ${{ env.project_file }} | grep "Schemes:" -A 10 | tail -n +2 | sed 's/^[[:space:]]*//')
            echo "Available Schemes: $SCHEMES"
            echo "selected_scheme=$(echo "$SCHEMES" | head -n 1)" >> $GITHUB_ENV  # Automatically select the first scheme

            echo "Selected Scheme: ${{ env.selected_scheme }}"

            # Use xcodebuild to build DocC documentation for the selected scheme
            echo "Building DocC documentation for Xcode project..."
            xcodebuild docbuild -scheme ${{ env.selected_scheme }} -derivedDataPath /tmp/docbuild -destination 'generic/platform=iOS'

            # Process the DocC archive to prepare for static hosting
            echo "Processing DocC archive..."
            $(xcrun --find docc) process-archive \
              transform-for-static-hosting /tmp/docbuild/Build/Products/Debug-iphoneos/${{ env.selected_scheme }}.doccarchive \
              --output-path docs \
              --hosting-base-path ${{ env.selected_scheme }}
          fi

          # Ensure the Assets (CSS/JS) are copied into the `docs` directory for deployment
          echo "Checking if Assets directory exists..."
          if [ ! -d "MyDocs.docc/Assets" ]; then
            echo "Error: Assets directory not found!"
            exit 1  # Exit with error if the directory doesn't exist
          fi

          echo "Copying Assets to docs/Assets..."
          mkdir -p docs/Assets  # Create the Assets folder in docs
          cp -r MyDocs.docc/Assets/* docs/Assets/  # Copy CSS, JS, etc. to the generated docs folder

          # Create a custom redirect in index.html to point to the main documentation
          echo "<script>window.location.href += \"/documentation/${{ env.selected_scheme }}\"</script>" > docs/index.html

      # Step 8: Upload the generated HTML docs to GitHub Pages
      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'  # Only the generated docs (HTML files) are uploaded to GitHub Pages.

      # Step 9: Clean up any temporary files or directories
      - name: Clean up temporary files
        run: |
          echo "Cleaning up..."
          rm -rf /tmp/docbuild  # Clean up the build folder
          rm -rf docs/Assets/*  # Clean up the assets folder, if needed

      # Step 10: Deploy the docs to GitHub Pages
      - id: deployment
        name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
